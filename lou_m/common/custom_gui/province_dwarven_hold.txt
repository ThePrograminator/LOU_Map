###############################
#Province Building Tab-bar
###############################
custom_button = {
    name = customui_open_menu_button_dwarven_hold
    potential = {
        customui_menu_is_closed_dwarven_hold_trigger = yes
        province_group = hold_province_group
        owner = {
            ai = no #make sure the AI gets an event or something similar where they can choose their branch the moment these buttons get unlocked for the player
            is_dwarf = yes
        }
    }
    trigger = { 
        hidden_trigger = {
            customui_menu_is_closed_dwarven_hold_trigger = yes 
        }
    }
    effect = { 
        customui_open_menu_dwarven_hold_effect = yes 
    }
    tooltip = customui_open_menu_button_dwarven_hold_title
}

###############################
#Hold View
###############################
custom_icon = {
    name = customui_menu_bg_dwarven_hold #Must match a scripted iconType in a .gui file
    potential = { 
        customui_menu_is_open_dwarven_hold_trigger = yes
    } #Determines when the icon is visible
    #tooltip = customui_open_menu_button_dwarven_hold_title #Can use customizable localisation
}

custom_button = {
    name = customui_close_menu_button_dwarven_hold
    potential = {
        customui_menu_is_open_dwarven_hold_trigger = yes
    }
    trigger = { 
        hidden_trigger = {
            customui_menu_is_open_dwarven_hold_trigger = yes 
        }
    }
    effect = { 
        customui_close_menu_dwarven_hold_effect = yes 
    }
    tooltip = customui_close_menu_button_dwarven_hold_title
}

custom_text_box = {
    name = customui_menu_title_dwarven_hold #Must match a scripted instantTextBoxType in a .gui file
    potential = { 
        customui_menu_is_open_dwarven_hold_trigger = yes
    } #Determines when the text is visible
    #tooltip = customui_open_menu_button_dwarven_hold_title #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

###############################
#Hold View - Top Bar
###############################

custom_icon = {
    name = customui_hold_level_icon_dwarven_hold #Must match a scripted iconType in a .gui file
    potential = { 
        customui_menu_is_open_dwarven_hold_trigger = yes
    } #Determines when the icon is visible
    #tooltip = customui_open_menu_button_dwarven_hold_title #Can use customizable localisation
    frame = {  #Can define multiple frame clauses
        number = 1 #Which frame to use. Check dds files with multiple icons like icon_religion.dds
        trigger = { 
            is_variable_equal = {
                which = customui_hold_level_dwarven_hold
                value = 0
            }
        } #First matched frame clause will be used.
    }
    frame = {
        number = 2
        trigger = { 
            is_variable_equal = {
                which = customui_hold_level_dwarven_hold
                value = 1
            }
        }
    }
    frame = {
        number = 3
        trigger = { 
            is_variable_equal = {
                which = customui_hold_level_dwarven_hold
                value = 2
            }
        }
    }
    frame = {
        number = 4
        trigger = { 
            customui_dev_30_dwarven_hold_trigger = yes
            check_variable = {
                which = customui_hold_level_dwarven_hold
                value = 3
            }
        }
    }
    frame = {
        number = 5
        trigger = { 
            customui_dev_30_1051_dwarven_hold_trigger = yes
            check_variable = {
                which = customui_hold_level_dwarven_hold
                value = 3
            }
        }
    }
    frame = {
        number = 6
        trigger = { 
            customui_dev_30_740_dwarven_hold_trigger = yes
            check_variable = {
                which = customui_hold_level_dwarven_hold
                value = 3
            }
        }
    }
    frame = {
        number = 7
        trigger = { 
            customui_dev_30_287_dwarven_hold_trigger = yes
            check_variable = {
                which = customui_hold_level_dwarven_hold
                value = 3
            }
        }
    }
}

custom_text_box = {
    name = customui_hold_level_title_dwarven_hold #Must match a scripted instantTextBoxType in a .gui file
    potential = { 
        customui_menu_is_open_dwarven_hold_trigger = yes
    } #Determines when the text is visible
    tooltip = customui_open_menu_button_dwarven_hold_title #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

###############################
#Hold View - Estate
###############################

custom_text_box = {
    name = customui_assigned_estate_title_dwarven_hold #Must match a scripted instantTextBoxType in a .gui file
    potential = { 
        customui_menu_is_open_dwarven_hold_trigger = yes
    } #Determines when the text is visible
    tooltip = customui_assigned_estate_title_dwarven_hold_tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

custom_text_box = {
    name = customui_estate_modifier_1_title_dwarven_hold #Must match a scripted instantTextBoxType in a .gui file
    potential = { 
        customui_menu_is_open_dwarven_hold_trigger = yes
        check_variable = {
            which = customui_assigned_estate_dwarven_hold
            value = 1
        }
    } #Determines when the text is visible
    tooltip = customui_estate_modifier_1_title_dwarven_hold_tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

custom_text_box = {
    name = customui_estate_modifier_2_title_dwarven_hold #Must match a scripted instantTextBoxType in a .gui file
    potential = { 
        customui_menu_is_open_dwarven_hold_trigger = yes
        check_variable = {
            which = customui_assigned_estate_dwarven_hold
            value = 1
        }
    } #Determines when the text is visible
    tooltip = customui_estate_modifier_2_title_dwarven_hold_tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

custom_text_box = {
    name = customui_estate_modifier_3_title_dwarven_hold #Must match a scripted instantTextBoxType in a .gui file
    potential = { 
        customui_menu_is_open_dwarven_hold_trigger = yes
        check_variable = {
            which = customui_assigned_estate_dwarven_hold
            value = 1
        }
    } #Determines when the text is visible
    tooltip = customui_estate_modifier_3_title_dwarven_hold_tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

custom_text_box = {
    name = customui_estate_modifier_4_title_dwarven_hold #Must match a scripted instantTextBoxType in a .gui file
    potential = { 
        customui_menu_is_open_dwarven_hold_trigger = yes
        check_variable = {
            which = customui_assigned_estate_dwarven_hold
            value = 1
        }
    } #Determines when the text is visible
    tooltip = customui_estate_modifier_4_title_dwarven_hold_tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

custom_button = {
    name = customui_assign_estate_button_dwarven_hold
    potential = {
        customui_menu_is_open_dwarven_hold_trigger = yes
    }
    trigger = {
        hidden_trigger = {
            check_variable = {
                which = customui_hold_level_dwarven_hold
                value = 2
            }
            customui_dropdown_is_closed_dwarven_hold_trigger = yes
            NOT = {
                customui_had_estate_flag_dwarven_hold_trigger = yes
            }
        } 
    }
    effect = { 
        customui_open_dropdown_dwarven_hold_effect =yes
    }
    tooltip = customui_assign_estate_button_dwarven_hold_title
}

###############################
#Hold View - Center
###############################
custom_icon = {
    name = customui_progress_bar_icon_dwarven_hold #Must match a scripted iconType in a .gui file
    potential = { 
        customui_menu_is_open_dwarven_hold_trigger = yes
    } #Determines when the icon is visible
    tooltip = customui_progress_bar_dwarven_hold_text #Can use customizable localisation
    frame = {  #Can define multiple frame clauses
        number = 1 #Which frame to use. Check dds files with multiple icons like icon_religion.dds
        trigger = { 
           OR = {
                AND = {
                    development_between = { VALUE = 10 LESSTHAN = 11 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 1
                    }
                }
                AND = {
                    development_between = { VALUE = 20 LESSTHAN = 21 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 2
                    }
                }
           }
        } #First matched frame clause will be used.
    }
    frame = {
        number = 2
        trigger = { 
            OR = {
                AND = {
                    development_between = { VALUE = 11 LESSTHAN = 12 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 1
                    }
                }
                AND = {
                    development_between = { VALUE = 21 LESSTHAN = 22 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 2
                    }
                }
            }
        }
    }
    frame = {
        number = 3
        trigger = { 
            OR = {
                AND = {
                    development_between = { VALUE = 12 LESSTHAN = 13 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 1
                    }
                }
                AND = {
                    development_between = { VALUE = 22 LESSTHAN = 23 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 2
                    }
                }
            }
        }
    }
    frame = {
        number = 4
        trigger = { 
            OR = {
                AND = {
                    development_between = { VALUE = 3 LESSTHAN = 4 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 0
                    }
                }
                AND = {
                    development_between = { VALUE = 13 LESSTHAN = 14 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 1
                    }
                }
                AND = {
                    development_between = { VALUE = 23 LESSTHAN = 24 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 2
                    }
                }
            }
        }
    }
    frame = {
        number = 5
        trigger = { 
            OR = {
                AND = {
                    development_between = { VALUE = 4 LESSTHAN = 5 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 0
                    }
                }
                AND = {
                    development_between = { VALUE = 14 LESSTHAN = 15 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 1
                    }
                }
                AND = {
                    development_between = { VALUE = 24 LESSTHAN = 25 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 2
                    }
                }
            }
        }
    }
    frame = {
        number = 6
        trigger = { 
            OR = {
                AND = {
                    development_between = { VALUE = 5 LESSTHAN = 6 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 0
                    }
                }
                AND = {
                    development_between = { VALUE = 15 LESSTHAN = 16 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 1
                    }
                }
                AND = {
                    development_between = { VALUE = 25 LESSTHAN = 26 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 2
                    }
                }
            }
        }
    }
    frame = {
        number = 7
        trigger = { 
            OR = {
                AND = {
                    development_between = { VALUE = 6 LESSTHAN = 7 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 0
                    }
                }
                AND = {
                    development_between = { VALUE = 16 LESSTHAN = 17 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 1
                    }
                }
                AND = {
                    development_between = { VALUE = 26 LESSTHAN = 27 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 2
                    }
                }
            }
        }
    }
    frame = {
        number = 8
        trigger = { 
            OR = {
                AND = {
                    development_between = { VALUE = 7 LESSTHAN = 8 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 0
                    }
                }
                AND = {
                    development_between = { VALUE = 17 LESSTHAN = 18 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 1
                    }
                }
                AND = {
                    development_between = { VALUE = 27 LESSTHAN = 28 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 2
                    }
                }
            }
        }
    }
    frame = {
        number = 9
        trigger = { 
            OR = {
                AND = {
                    development_between = { VALUE = 8 LESSTHAN = 9 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 0
                    }
                }
                AND = {
                    development_between = { VALUE = 18 LESSTHAN = 19 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 1
                    }
                }
                AND = {
                    development_between = { VALUE = 28 LESSTHAN = 29 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 2
                    }
                }
            }
        }
    }
    frame = {
        number = 10
        trigger = { 
            OR = {
                AND = {
                    development_between = { VALUE = 9 LESSTHAN = 10 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 0
                    }
                }
                AND = {
                    development_between = { VALUE = 19 LESSTHAN = 20 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 1
                    }
                }
                AND = {
                    development_between = { VALUE = 29 LESSTHAN = 30 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 2
                    }
                }
            }
        }
    }
    frame = {
        number = 11
        trigger = { 
            OR = {
                AND = {
                    development_between = { VALUE = 10 LESSTHAN = 21 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 0
                    }
                }
                AND = {
                    development_between = { VALUE = 20 LESSTHAN = 31 }
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 1
                    }
                }
                development = 30
            }
        }
    }
}

custom_button = {
    name = customui_upgrade_hold_button_dwarven_hold
    potential = {
        customui_menu_is_open_dwarven_hold_trigger = yes
    }
    trigger = {
        upgrade_dwarven_hold_requirement = yes
        hidden_trigger = {
            OR = {
                AND = {
                    development = 10
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 0
                    }
                }
                AND = {
                    development = 20
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 1
                    }
                }
                AND = {
                    development = 30
                    is_variable_equal = {
                        which = customui_hold_level_dwarven_hold
                        value = 2
                    }
                }
            } 
            
            NOT = {
                is_variable_equal = {
                    which = customui_hold_level_dwarven_hold
                    value = 3
                }
            }
        }
    }
    effect = { 
        customui_upgrade_dwarven_level_dwarven_hold_effect = yes
    }
    tooltip = customui_upgrade_hold_button_dwarven_hold_title
}

###############################
#Hold View - Bottom Modifiers
###############################

custom_text_box = {
    name = customui_tax_modifier_text_dwarven_hold #Must match a scripted instantTextBoxType in a .gui file
    potential = { 
        customui_menu_is_open_dwarven_hold_trigger = yes
    } #Determines when the text is visible
    tooltip = customui_tax_modifier_text_dwarven_hold_tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

custom_text_box = {
    name = customui_production_modifier_text_dwarven_hold #Must match a scripted instantTextBoxType in a .gui file
    potential = { 
        customui_menu_is_open_dwarven_hold_trigger = yes
    } #Determines when the text is visible
    tooltip = customui_production_modifier_text_dwarven_hold_tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

custom_text_box = {
    name = customui_manpower_modifier_text_dwarven_hold #Must match a scripted instantTextBoxType in a .gui file
    potential = { 
        customui_menu_is_open_dwarven_hold_trigger = yes
    } #Determines when the text is visible
    tooltip = customui_manpower_modifier_text_dwarven_hold_tt #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

###############################
#Hold View - Drop Down
###############################

custom_icon = {
    name = customui_dropdown_bg_dwarven_hold #Must match a scripted iconType in a .gui file
    potential = { 
        customui_dropdown_is_open_dwarven_hold_trigger = yes
    } #Determines when the icon is visible
    tooltip = customui_open_menu_button_dwarven_hold_title #Can use customizable localisation
}

custom_button = {
    name = customui_close_dropdown_button_dwarven_hold
    potential = {
        customui_dropdown_is_open_dwarven_hold_trigger = yes
    }
    trigger = { 
        hidden_trigger = {
            customui_dropdown_is_open_dwarven_hold_trigger = yes 
        }
    }
    effect = { 
        customui_close_dropdown_dwarven_hold_effect = yes 
    }
    tooltip = customui_close_dropdown_button_dwarven_hold_title
}

custom_text_box = {
    name = customui_dropdown_title_dwarven_hold #Must match a scripted instantTextBoxType in a .gui file
    potential = { 
        customui_dropdown_is_open_dwarven_hold_trigger = yes
    } #Determines when the text is visible
    #tooltip = customui_open_menu_button_dwarven_hold_title #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

#####################################
#Hold View - Drop Down - 1 Estate
#####################################

custom_icon = {
    name = customui_dropdown_estate_1_icon_dwarven_hold #Must match a scripted iconType in a .gui file
    potential = { 
        customui_dropdown_is_open_dwarven_hold_trigger = yes
    } #Determines when the icon is visible
    tooltip = customui_dropdown_estate_1_modifier_dwarven_hold #Can use customizable localisation
    frame = {  #Can define multiple frame clauses
        number = 1 #Which frame to use. Check dds files with multiple icons like icon_religion.dds
        trigger = { 
           always = yes
        } #First matched frame clause will be used.
    }
}

custom_button = {
    name = customui_dropdown_estate_1_button_dwarven_hold
    potential = {
        owner = {
            #has_estate = estate_dwarven_scholars
            has_estate = estate_stewards
        }
        customui_dropdown_is_open_dwarven_hold_trigger = yes
    }
    trigger = { 
        hidden_trigger = {
            customui_dropdown_is_open_dwarven_hold_trigger = yes 
            NOT = {
                is_variable_equal = {
                    which = customui_assigned_estate_dwarven_hold
                    value = 1
                }
            }
            NOT = {
                customui_had_estate_flag_dwarven_hold_trigger = yes
            }
        }
    }
    effect = { 
        customui_assign_estate_dwarven_hold_effect = { VALUE = 1 }
    }
    tooltip = customui_assign_estate_1_button_dwarven_hold_title
}

custom_text_box = {
    name = customui_dropdown_estate_1_modifier_text_dwarven_hold #Must match a scripted instantTextBoxType in a .gui file
    potential = { 
        customui_dropdown_is_open_dwarven_hold_trigger = yes
    } #Determines when the text is visible
    tooltip = customui_dropdown_estate_1_modifier_dwarven_hold #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

#####################################
#Hold View - Drop Down - 2 Estate
#####################################

custom_icon = {
    name = customui_dropdown_estate_2_icon_dwarven_hold #Must match a scripted iconType in a .gui file
    potential = { 
        customui_dropdown_is_open_dwarven_hold_trigger = yes
    } #Determines when the icon is visible
    tooltip = customui_dropdown_estate_2_modifier_dwarven_hold #Can use customizable localisation
    frame = {  #Can define multiple frame clauses
        number = 2 #Which frame to use. Check dds files with multiple icons like icon_religion.dds
        trigger = { 
           always = yes
        } #First matched frame clause will be used.
    }
}

custom_button = {
    name = customui_dropdown_estate_2_button_dwarven_hold
    potential = {
        owner = {
            #has_estate = estate_dwarven_masons
            has_estate = estate_nobles
        }
        customui_dropdown_is_open_dwarven_hold_trigger = yes
    }
    trigger = { 
        hidden_trigger = {
            customui_dropdown_is_open_dwarven_hold_trigger = yes 
            NOT = {
                is_variable_equal = {
                    which = customui_assigned_estate_dwarven_hold
                    value = 2
                }
            }
            NOT = {
                customui_had_estate_flag_dwarven_hold_trigger = yes
            }
        }
    }
    effect = { 
        customui_assign_estate_dwarven_hold_effect = { VALUE = 2}
    }
    tooltip = customui_assign_estate_2_button_dwarven_hold_title
}

custom_text_box = {
    name = customui_dropdown_estate_2_modifier_text_dwarven_hold #Must match a scripted instantTextBoxType in a .gui file
    potential = { 
        customui_dropdown_is_open_dwarven_hold_trigger = yes
    } #Determines when the text is visible
    tooltip = customui_dropdown_estate_2_modifier_dwarven_hold #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

#####################################
#Hold View - Drop Down - 3 Estate
#####################################

custom_icon = {
    name = customui_dropdown_estate_3_icon_dwarven_hold #Must match a scripted iconType in a .gui file
    potential = { 
        customui_dropdown_is_open_dwarven_hold_trigger = yes
    } #Determines when the icon is visible
    tooltip = customui_dropdown_estate_3_modifier_dwarven_hold #Can use customizable localisation
    frame = {  #Can define multiple frame clauses
        number = 3 #Which frame to use. Check dds files with multiple icons like icon_religion.dds
        trigger = { 
           always = yes
        } #First matched frame clause will be used.
    }
}

custom_button = {
    name = customui_dropdown_estate_3_button_dwarven_hold
    potential = {
        owner = {
            #has_estate = estate_dwarven_warriors
            has_estate = estate_merchants
        }
        customui_dropdown_is_open_dwarven_hold_trigger = yes
    }
    trigger = { 
        hidden_trigger = {
            customui_dropdown_is_open_dwarven_hold_trigger = yes 
            NOT = {
                is_variable_equal = {
                    which = customui_assigned_estate_dwarven_hold
                    value = 3
                }
            }
            NOT = {
                customui_had_estate_flag_dwarven_hold_trigger = yes
            }
        }
    }
    effect = { 
        customui_assign_estate_dwarven_hold_effect = { VALUE = 3}
    }
    tooltip = customui_assign_estate_3_button_dwarven_hold_title
}

custom_text_box = {
    name = customui_dropdown_estate_3_modifier_text_dwarven_hold #Must match a scripted instantTextBoxType in a .gui file
    potential = { 
        customui_dropdown_is_open_dwarven_hold_trigger = yes
    } #Determines when the text is visible
    tooltip = customui_dropdown_estate_3_modifier_dwarven_hold #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

#####################################
#Hold View - Drop Down - 4 Estate
#####################################

custom_icon = {
    name = customui_dropdown_estate_4_icon_dwarven_hold #Must match a scripted iconType in a .gui file
    potential = { 
        customui_dropdown_is_open_dwarven_hold_trigger = yes
    } #Determines when the icon is visible
    tooltip = customui_dropdown_estate_4_modifier_dwarven_hold #Can use customizable localisation
    frame = {  #Can define multiple frame clauses
        number = 4 #Which frame to use. Check dds files with multiple icons like icon_religion.dds
        trigger = { 
           always = yes
        } #First matched frame clause will be used.
    }
}

custom_button = {
    name = customui_dropdown_estate_4_button_dwarven_hold
    potential = {
        owner = {
           # has_estate = estate_dwarven_warriors
           has_estate = estate_commoners
        }
        customui_dropdown_is_open_dwarven_hold_trigger = yes
    }
    trigger = { 
        hidden_trigger = {
            customui_dropdown_is_open_dwarven_hold_trigger = yes 
            NOT = {
                is_variable_equal = {
                    which = customui_assigned_estate_dwarven_hold
                    value = 4
                }
            }
            NOT = {
                customui_had_estate_flag_dwarven_hold_trigger = yes
            }
        }
    }
    effect = { 
        customui_assign_estate_dwarven_hold_effect = { VALUE = 4}
    }
    tooltip = customui_assign_estate_4_button_dwarven_hold_title
}

custom_text_box = {
    name = customui_dropdown_estate_4_modifier_text_dwarven_hold #Must match a scripted instantTextBoxType in a .gui file
    potential = { 
        customui_dropdown_is_open_dwarven_hold_trigger = yes
    } #Determines when the text is visible
    tooltip = customui_dropdown_estate_4_modifier_dwarven_hold #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

#####################################
#Hold View - Drop Down - 5 Estate
#####################################

custom_icon = {
    name = customui_dropdown_estate_5_icon_dwarven_hold #Must match a scripted iconType in a .gui file
    potential = { 
        owner = {
            has_estate = estate_dwarven_warriors
        }
        customui_dropdown_is_open_dwarven_hold_trigger = yes
    } #Determines when the icon is visible
    tooltip = customui_dropdown_estate_5_modifier_dwarven_hold #Can use customizable localisation
    frame = {  #Can define multiple frame clauses
        number = 5 #Which frame to use. Check dds files with multiple icons like icon_religion.dds
        trigger = { 
           always = yes
        } #First matched frame clause will be used.
    }
}

custom_button = {
    name = customui_dropdown_estate_5_button_dwarven_hold
    potential = {
        owner = {
            has_estate = estate_dwarven_warriors
        }
        customui_dropdown_is_open_dwarven_hold_trigger = yes
    }
    trigger = { 
        hidden_trigger = {
            customui_dropdown_is_open_dwarven_hold_trigger = yes 
            NOT = {
                is_variable_equal = {
                    which = customui_assigned_estate_dwarven_hold
                    value = 5
                }
            }
            NOT = {
                customui_had_estate_flag_dwarven_hold_trigger = yes
            }
        }
    }
    effect = { 
        customui_assign_estate_dwarven_hold_effect = { VALUE = 5}
    }
    tooltip = customui_assign_estate_5_button_dwarven_hold_title
}

custom_text_box = {
    name = customui_dropdown_estate_5_modifier_text_dwarven_hold #Must match a scripted instantTextBoxType in a .gui file
    potential = { 
        owner = {
            has_estate = estate_dwarven_warriors
        }
        customui_dropdown_is_open_dwarven_hold_trigger = yes
    } #Determines when the text is visible
    tooltip = customui_dropdown_estate_5_modifier_dwarven_hold #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

#####################################
#Hold View - Drop Down - 6 (Special) Estate
#####################################

custom_icon = {
    name = customui_dropdown_estate_6_icon_dwarven_hold #Must match a scripted iconType in a .gui file
    potential = { 
        customui_dropdown_is_open_dwarven_hold_trigger = yes
    } #Determines when the icon is visible
    tooltip = customui_dropdown_estate_6_modifier_dwarven_hold #Can use customizable localisation
    frame = {  #Can define multiple frame clauses
        number = 6 #Which frame to use. Check dds files with multiple icons like icon_religion.dds
        trigger = { 
           always = yes
        } #First matched frame clause will be used.
    }
}

custom_button = {
    name = customui_dropdown_estate_6_button_dwarven_hold
    potential = {
        customui_dropdown_is_open_dwarven_hold_trigger = yes
    }
    trigger = { 
        hidden_trigger = {
            customui_dropdown_is_open_dwarven_hold_trigger = yes 
            NOT = {
                is_variable_equal = {
                    which = customui_assigned_estate_dwarven_hold
                    value = 6
                }
            }
            NOT = {
                customui_had_estate_flag_dwarven_hold_trigger = yes
            }
        }
    }
    effect = { 
        customui_assign_estate_dwarven_hold_effect = { VALUE = 6}
    }
    tooltip = customui_assign_estate_6_button_dwarven_hold_title
}

custom_text_box = {
    name = customui_dropdown_estate_6_modifier_text_dwarven_hold #Must match a scripted instantTextBoxType in a .gui file
    potential = { 
        customui_dropdown_is_open_dwarven_hold_trigger = yes
    } #Determines when the text is visible
    tooltip = customui_dropdown_estate_6_modifier_dwarven_hold #Can use customizable localisation
    #To localize it, use the name of the button as a key, can also use customizable localisation
}

#####################################
#Hold View - Drop Down - 0 Unasign
#####################################

custom_button = {
    name = customui_dropdown_estate_0_button_dwarven_hold
    potential = {
        customui_dropdown_is_open_dwarven_hold_trigger = yes
    }
    trigger = { 
        hidden_trigger = {
            customui_dropdown_is_open_dwarven_hold_trigger = yes 
            NOT = {
                is_variable_equal = {
                    which = customui_assigned_estate_dwarven_hold
                    value = 0
                }
            }
            NOT = {
                customui_had_estate_flag_dwarven_hold_trigger = yes
            }
        }
    }
    effect = { 
        customui_assign_estate_dwarven_hold_effect = { VALUE = 0}
    }
    tooltip = customui_assign_estate_0_button_dwarven_hold_title
}